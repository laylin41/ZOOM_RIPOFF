@page "/profile"
@rendermode InteractiveServer
@inject UserManager<AppUser> UserManager
@inject AuthenticationStateProvider AuthProvider
@attribute [Authorize]

<div class="container mt-4">
    <h2 class="mb-4 text-center">Мій профіль</h2>

    @if (!string.IsNullOrEmpty(success))
    {
        <div class="alert alert-success">@success</div>
    }
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }

    <div class="card mb-4">
        <div class="card-body d-flex align-items-center">
            @if (!string.IsNullOrEmpty(profileModel.AvatarUrl))
            {
                <img src="@profileModel.AvatarUrl" alt="Avatar" class="rounded-circle me-3" style="width: 100px; height: 100px;" />
            }
            <form method="post" enctype="multipart/form-data" action="/auth/upload-avatar" class="w-100">
                <div class="mb-2">
                    <input type="file" name="avatar" class="form-control" />
                </div>
                <button class="btn btn-outline-secondary btn-sm">Завантажити аватарку</button>
            </form>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title mb-3">Інформація профілю</h5>
            <EditForm Model="profileModel">
                <form method="post" action="/auth/update-profile">
                    <input type="hidden" name="email" value="@profileModel.Email" />
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="profileModel.Email" name="email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Відображуване ім’я</label>
                        <InputText class="form-control" @bind-Value="profileModel.DisplayName" name="displayName" />
                    </div>
                    <button class="btn btn-primary" type="submit">Зберегти</button>
                </form>
            </EditForm>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Особистий ID для зустрічей</h5>
            @if (!string.IsNullOrEmpty(profileModel.MeetingId))
            {
                <p class="mb-3"><strong>ID:</strong> @profileModel.MeetingId</p>
            }
            <form method="post" action="/auth/generate-meeting-id">
                <button class="btn btn-outline-info">Згенерувати новий</button>
            </form>
        </div>
    </div>

    <div class="card mb-5">
        <div class="card-body">
            <h5 class="card-title">Змінити пароль</h5>
            <form method="post" action="/auth/change-password">
                <div class="mb-3">
                    <label class="form-label">Старий пароль</label>
                    <input type="password" name="oldPassword" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Новий пароль</label>
                    <input type="password" name="newPassword" class="form-control" />
                </div>
                <button class="btn btn-warning" type="submit">Змінити пароль</button>
            </form>
        </div>
    </div>
</div>

@code {
    private ProfileModel profileModel = new();
    [Parameter]
    [SupplyParameterFromQuery]
    public string? error { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? success { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user is AppUser appUser)
        {
            profileModel.Email = appUser.Email;
            profileModel.DisplayName = appUser.DisplayName;
            profileModel.AvatarUrl = appUser.AvatarUrl;
            profileModel.MeetingId = appUser.PersonalMeetingId;
        }
    }

    public class ProfileModel
    {
        public string? Email { get; set; }
        public string? DisplayName { get; set; }
        public string? AvatarUrl { get; set; }
        public string? MeetingId { get; set; }
    }
}

@* @page "/register"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager 
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Register</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName ="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email">Email address</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Register</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
</EditForm>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;

    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            // Display error message on failed login
            errorMessage = "Invalid registration attempt. Inputted passwords don`t match.";
            return;
        }

        var user = new IdentityUser { UserName = registerModel.Email, Email = registerModel.Email };
        var result = await UserManager.CreateAsync(user, registerModel.Password);

        if (result.Succeeded)
        {
            errorMessage = null; 
            await SignInManager.SignInAsync(user, false);
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid registration attempt. Please try again.";
            foreach (var elem in result.Errors)
            {
                errorMessage += "\n" + elem.Description;
            }
        }
    }

    public class RegisterModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
}
 *@

@page "/register"
@rendermode InteractiveServer

<h3>Register</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

<form method="post" action="/auth/register">
    <div class="mb-3">
        <label for="email">Email address</label>
        <input id="email" name="email" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <input id="password" name="password" type="password" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <input id="confirmPassword" name="confirmPassword" type="password" class="form-control" />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Register</button>
    </div>
</form>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? error { get; set; }
}

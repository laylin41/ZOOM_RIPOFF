@page "/meeting/{RoomId}"
@inject UserManager<AppUser> UserManager
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IMeetingService MeetingService
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="container-fluid vh-100 d-flex flex-column">
    @if (meeting != null)
    {
        <!-- Header -->
        <div class="p-3 bg-primary text-white shadow-sm d-flex justify-content-between align-items-center">
            <h3 class="mb-0">
                @meeting.MeetingName (ID: @RoomId)
                @if (!meeting.IsActive)
                {
                    <span class="badge bg-danger ms-2">Неактивна</span>
                }
            </h3>
            @if (meeting.ScheduledToStartAt != null && !meeting.IsActive)
            {
                <span class="fw-light">Заплановано на @meeting.ScheduledToStartAt?.ToLocalTime().ToString("g")</span>
            }
        </div>

        @if (meeting.IsActive)
        {
            <div class="d-flex">
                <!-- Participants Section -->
                <div class="p-3 bg-white shadow-sm" style="width: 300px; overflow-y: auto;">
                    <h5 class="fw-bold mb-3 text-primary">Учасники (@Users.Count)</h5>
                    <div class="participant-grid">
                        @foreach (var user in Users)
                        {
                            <div class="card participant-tile shadow-sm border-0">
                                <div class="card-body p-2 text-center">

                                    <video id="localVideo" oncanplay="this.muted=true;this.autoplay=true;this.playsinline=true"
                                           style="width: 400px; height: 300px; border: 2px solid #333; @(user.IsVideoEnabled ? "" : "display: none;")">
                                    </video>

                                    <img src="@user.AvatarUrl"
                                         class="avatar rounded-circle mb-2"
                                         alt="@user.UserName's avatar"
                                         style="@(user.IsVideoEnabled ? "display: none;" : "")" />

                                    <div class="fw-semibold">@user.UserName</div>
                                    <div class="d-flex justify-content-center gap-2 mt-1">
                                        <span class="badge @(user.IsMicrophoneEnabled ? "bg-success" : "bg-secondary")">
                                            <i class="bi @(user.IsMicrophoneEnabled ? "bi-mic-fill" : "bi-mic-mute-fill")"></i>
                                        </span>
                                        <span class="badge @(user.IsVideoEnabled ? "bg-success" : "bg-secondary")">
                                            <i class="bi @(user.IsVideoEnabled ? "bi-camera-video-fill" : "bi-camera-video-off-fill")"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Chat -->
            @if (showChats)
            {
                <!-- Chat Section -->
                <div class="card chat-container d-flex">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Чат</h5>
                        <div>
                            <label class="text-white me-2">
                                <input type="checkbox" @bind="IsPrivate" class="me-1" /> Приватне повідомлення
                            </label>
                            @if (IsPrivate)
                            {
                                <select @bind="SelectedPrivateUserId" class="form-select form-select-sm d-inline-block" style="width: auto;">
                                    <option disabled selected value="">-- Оберіть користувача --</option>
                                    @foreach (var user in Users.Where(u => u.UserId != UserId))
                                    {
                                        <option value="@user.UserId">@user.UserName</option>
                                    }
                                    @foreach (var user in DisconnectedButWithChatUsers.Where(u => u.UserId != UserId))
                                    {
                                        <option value="@user.UserId">@user.UserName (Офлайн)</option>
                                    }
                                </select>
                            }
                        </div>
                    </div>
                    <div class="card-body chat-box p-3" style="overflow-y: auto;">
                        @if (!IsPrivate)
                        {
                            @foreach (var msg in ChatHistory)
                            {
                                <div class="chat-message mb-2">
                                    <span class="fw-semibold">@msg.SenderName:</span>
                                    @if (msg.IsFile)
                                    {
                                        <a href="data:application/octet-stream;base64,@msg.FileContentBase64" download="@msg.FileName" class="text-primary">
                                            <i class="bi bi-file-earmark-arrow-down me-1"></i>@msg.FileName
                                        </a>
                                    }
                                    else
                                    {
                                        <span>@msg.Content</span>
                                    }
                                </div>
                            }
                        }
                        else if (!string.IsNullOrWhiteSpace(SelectedPrivateUserId) && PrivateChatHistories.TryGetValue(SelectedPrivateUserId, out var privateMessages))
                        {
                            @foreach (var msg in privateMessages)
                            {
                                <div class="chat-message mb-2">
                                    <span class="fw-semibold">@msg.SenderName:</span> @msg.Content
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-muted text-center"><i>Немає приватних повідомлень.</i></div>
                        }
                    </div>
                    <div class="card-footer bg-light p-3">
                        <div class="input-group">
                            <input type="text" @bind="ChatMessage" @onkeypress="SendOnEnter" class="form-control" placeholder="Введіть повідомлення..." />
                            <button class="btn btn-primary" @onclick="SendMessage"><i class="bi bi-send"></i></button>
                        </div>
                        <div class="mt-2">
                            <InputFile OnChange="HandleFileSelected" class="form-control" />
                            @if (SelectedFile != null)
                            {
                                <div class="mt-2">
                                    <span>Файл: @SelectedFile.Name (@(SelectedFile.Size / 1024) KB)</span>
                                    @if (SelectedFile.Size > 10000000)
                                    {
                                        <span class="text-danger ms-2">Розмір файлу перевищує ліміт 10MB.</span>
                                    }
                                    @if (CanSendFile)
                                    {
                                        <button class="btn btn-outline-primary btn-sm mt-1" @onclick="UploadFile">Надіслати файл</button>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Controls -->
            <div class="m-2 d-flex justify-content-center gap-3" style="bottom:auto">
                <button class="btn btn-outline-primary btn-icon" @onclick="ToggleMic" title="@(MicEnabled ? "Вимкнути мікрофон" : "Увімкнути мікрофон")">
                    <i class="bi @(MicEnabled ? "bi-mic-fill" : "bi-mic-mute-fill")"></i>
                </button>
                <button class="btn btn-outline-primary btn-icon" @onclick="ToggleVideo" title="@(VideoEnabled ? "Вимкнути відео" : "Увімкнути відео")">
                    <i class="bi @(VideoEnabled ? "bi-camera-video-fill" : "bi-camera-video-off-fill")"></i>
                </button>
                <button class="btn btn-outline-primary btn-icon" @onclick="ToggleChat" title="@(showChats ? "Відкрити чат" : "Закрити чат")">
                    <i class="bi @(showChats ? "bi-chat-left" : "bi-chat-left-text")"></i>
                </button>
                <button class="btn btn-danger" @onclick="ExitMeeting">
                    <i class="bi bi-box-arrow-right"></i> Вийти
                </button>
            </div>
        }
    }
</div>

<style>
    .vh-100 {
        height: 100vh;
    }

    .participant-tile {
        transition: transform 0.2s;
    }

    .participant-tile:hover {
        transform: translateY(-2px);
    }

    .avatar {
        width: 80px;
        height: 80px;
        object-fit: cover;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        min-height: 0;
        height: 100%;
    }

    .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        min-height: 0;
    }

    .chat-message {
        padding: 0.2rem;
        border-radius: 0.2rem;
        max-width: 80%;
    }

    .btn-icon {
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
    }

    .participant-video {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 50%;
    }

    @@media (max-width: 768px) {
        .participant-tile .avatar {
            width: 60px;
            height: 60px;
        }

        .btn-icon {
            width: 40px;
            height: 40px;
            font-size: 1rem;
        }

        .participant-section {
            width: 200px;
        }
    }

</style>

@code {
    [Parameter]
    public string RoomId { get; set; } = default!;

    private Meeting meeting = new();

    private HubConnection? _hubConnection;
    private List<UserConnectionInfo> Users = new();
    private List<UserConnectionInfo> DisconnectedButWithChatUsers = new();

    private string UserId = "error";
    private string UserName = "error";
    private string AvatarUrl = "/avatars/default.png";
    private DotNetObjectReference<MeetingRoom>? dotNetRef;
    private bool MicEnabled = false;
    private bool VideoEnabled = false;

    private string ChatMessage = "";
    private string SelectedPrivateUserId = "";
    private bool IsPrivate = false;
    private List<ChatMessage> ChatHistory = new();
    private Dictionary<string, List<ChatMessage>> PrivateChatHistories = new();

    private IBrowserFile? SelectedFile;
    private bool CanSendFile = true;

    private bool showChats = false;

    private IJSObjectReference? webrtcModule;

    private void ToggleChat()
    {
        showChats = !showChats;
    }

    private async Task UploadFile()
    {
        if (SelectedFile == null || _hubConnection == null || _hubConnection.State != HubConnectionState.Connected)
            return;

        if (SelectedFile.Size > 10000000) // 10MB limit
        {
            return;
        }

        using var stream = SelectedFile.OpenReadStream(10000000); // Max 10MB
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var fileBytes = ms.ToArray();

        var fileMessage = new ChatMessage
        {
            SenderId = UserId,
            SenderName = UserName,
            Content = $"Sent a file: {SelectedFile.Name}",
            FileName = SelectedFile.Name,
            Timestamp = DateTime.Now,
            FileContentBase64 = Convert.ToBase64String(fileBytes),
            ToUserId = IsPrivate ? SelectedPrivateUserId : null,
            IsFile = true,
        };

        await _hubConnection.InvokeAsync("SendFileMessage", RoomId, fileMessage);

        SelectedFile = null;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;

        if (SelectedFile.Size > 10000000) // 10MB limit
        {
            CanSendFile = false;
            return;
        }
        else
        {
            CanSendFile = true;
        }
    }

    [JSInvokable]
    public async Task LeaveMeetingFromJs()
    {
        //Console.WriteLine("LeaveMeetingFromJs Called");
        await ExitMeeting();
    }

    protected override async Task OnInitializedAsync()
    {
        meeting = await MeetingService.GetMeetingByIdAsync(RoomId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"OnAfterRenderAsync called at {DateTime.Now}, FirstRender: {firstRender}");

        if (firstRender)
        {
            webrtcModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/webrtc.js");
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerBeforeUnload", dotNetRef);

            try
            {
                var authState = await AuthProvider.GetAuthenticationStateAsync();
                var user = await UserManager.GetUserAsync(authState.User);

                if (user != null)
                {
                    UserId = user.Id;
                    UserName = user.DisplayName ?? "No Name";
                    AvatarUrl = user.AvatarUrl ?? "/avatars/default.png";
                }
                else
                {
                    UserName = "Guest";
                    AvatarUrl = "/avatars/default.png";
                    firstRender = true;
                    Navigation.NavigateTo("/login");
                }

                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading user data: {ex.Message}");
            }

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/meetinghub"))
                .WithAutomaticReconnect()
                .Build();

            Console.WriteLine($"Registering handlers for {UserName}");
            _hubConnection.On<UserConnectionInfo>("UserJoined", async (user) =>
            {
                // Remove stale entries with same UserId
                //Users.RemoveAll(u => u.UserId == user.UserId);
                //DisconnectedButWithChatUsers.RemoveAll(u => u.UserId == user.UserId);

                Console.WriteLine("UserJoined triggered"); //log
                Console.WriteLine($"UserJoined: {user.UserName}, ConnectionId: {user.ConnectionId}"); //log
                if (!Users.Any(u => u.UserId == user.UserId))
                {
                    Console.WriteLine($"Adding user: {user.UserName}"); //log
                    Users.Add(user);
                    await InvokeAsync(StateHasChanged);
                }

                if (DisconnectedButWithChatUsers.Any(u => u.UserId == user.UserId))
                {
                    Console.WriteLine($"Removing user from dbwchUsers: {user.UserName}"); //log
                    DisconnectedButWithChatUsers.RemoveAll(u => u.UserId == user.UserId);
                    await InvokeAsync(StateHasChanged);
                }
            });

            _hubConnection.On<List<UserConnectionInfo>>("CurrentUsers", async (users) =>
            {
                //Console.WriteLine("CurrentUsers triggered"); //log

                foreach (var user in users)
                {
                    //Console.WriteLine($"  - {user.UserName}, ConnectionId: {user.ConnectionId}"); //log
                    if (!Users.Any(u => u.UserId == user.UserId))
                    {
                        //Console.WriteLine($"Adding user from CurrentUsers: {user.UserName}"); //log
                        Users.Add(user);
                    }
                }
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<string, string, bool>("UserStatusChanged", async (connId, type, isEnabled) =>
            {
                var user = Users.FirstOrDefault(u => u.ConnectionId == connId);
                if (user != null)
                {
                    if (type == "video")
                    {
                        user.IsVideoEnabled = isEnabled;
                        if (isEnabled)
                        {
                            // invoke js to turn on video of other user to me
                        }
                        else
                        {
                            // invoke js to turn off video of other user to me
                        }
                    }

                    if (type == "microphone")
                    {
                        user.IsMicrophoneEnabled = isEnabled;
                        if (isEnabled)
                        {
                            // invoke js to turn on microphone of other user to me
                        }
                        else
                        {
                            // invoke js to turn off microphone of other user to me
                        }
                    }

                    Console.WriteLine($"UserStatusChanged: ConnectionId={connId}, Type={type}, IsEnabled={isEnabled}"); // log

                    await InvokeAsync(StateHasChanged);
                }
            });

            _hubConnection.On<string, string>("UserLeft", async (connId, userName) =>
            {
                //Console.WriteLine("UserLeft triggered"); // log
                //Console.WriteLine($"UserLeft: {userName}, ConnectionId: {connId}"); //log
                var user = Users.FirstOrDefault(u => u.ConnectionId == connId);
                if (user != null)
                {
                    //Users.Remove(user);
                    Users.RemoveAll(u => u.UserId == user.UserId);

                    if (PrivateChatHistories.ContainsKey(user.UserId) && !DisconnectedButWithChatUsers.Any(u => u.UserId == user.UserId))
                    {
                        DisconnectedButWithChatUsers.Add(user);
                    }
                    await InvokeAsync(StateHasChanged);
                }
            });

            _hubConnection.On<ChatMessage>("ReceiveChatMessage", async (message) =>
            {
                ChatHistory.Add(message);
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<List<ChatMessage>>("SendChatHistory", async (history) =>
            {
                ChatHistory = history;
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<string, ChatMessage>("ReceivePrivateMessage", async (fromUserId, message) =>
            {
                if (!PrivateChatHistories.ContainsKey(fromUserId))
                {
                    PrivateChatHistories[fromUserId] = new List<ChatMessage>();
                }

                PrivateChatHistories[fromUserId].Add(message);
                await InvokeAsync(StateHasChanged);
            });

            _hubConnection.On<ChatMessage>("ReceiveFileMessage", async (fileMsg) =>
            {
                if (fileMsg.ToUserId != null && !string.IsNullOrEmpty(fileMsg.ToUserId))
                {
                    if (!PrivateChatHistories.ContainsKey(fileMsg.SenderId))
                        PrivateChatHistories[fileMsg.SenderId] = new List<ChatMessage>();
                    PrivateChatHistories[fileMsg.SenderId].Add(fileMsg);
                }
                else
                {
                    ChatHistory.Add(fileMsg);
                }

                await InvokeAsync(StateHasChanged);
            });


            await _hubConnection.StartAsync();

            if (_hubConnection.State == HubConnectionState.Connected)
            {
                Console.WriteLine("Calling JoinMeeting...");
                await _hubConnection.InvokeAsync("JoinMeeting", RoomId, UserId, UserName, AvatarUrl);
            }
            else
            {
                Console.WriteLine($"Connection not ready. Current state: {_hubConnection.State}");
            }
        }
    }

    private async Task ToggleMic()
    {
        MicEnabled = !MicEnabled;
        await UpdateMedia();
        await _hubConnection?.InvokeAsync("UpdateStatus", RoomId, "microphone", MicEnabled, UserId)!;
    }

    private async Task ToggleVideo()
    {
        VideoEnabled = !VideoEnabled;
        await UpdateMedia();
        await _hubConnection?.InvokeAsync("UpdateStatus", RoomId, "video", VideoEnabled, UserId)!;
    }

    private async Task UpdateMedia()
    {
        
        if (VideoEnabled || MicEnabled)
        {
            Console.WriteLine($"Update media called, Video:{VideoEnabled}, Mic:{MicEnabled}");
            await JS.InvokeAsync<bool>("startMedia", "localVideo", VideoEnabled, MicEnabled);
        }
        else
        {
            Console.WriteLine($"Stopping media, Video:{VideoEnabled}, Mic:{MicEnabled}");
            await JS.InvokeVoidAsync("stopMedia");
        }
    }

    private async Task ExitMeeting()
    {
        try
        {
            if (_hubConnection != null && _hubConnection.State == HubConnectionState.Connected && UserId != "error")
            {
                await _hubConnection.InvokeAsync("LeaveMeeting", RoomId, UserId, UserName);
                await _hubConnection.StopAsync();
                await _hubConnection.DisposeAsync();
                _hubConnection = null;
            }
            Users.Clear();
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exiting meeting: {ex.Message}");
            await InvokeAsync(StateHasChanged);
        }
    }

    [JSInvokable]
    public async Task OnBeforeUnload()
    {
        //Console.WriteLine("OnBeforeUnload invoked");
        // Call ExitMeeting only if the hub connection is active
        if (_hubConnection != null && _hubConnection.State == HubConnectionState.Connected && UserId != "error")
        {
            await ExitMeeting();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeVoidAsync("unregisterBeforeUnload");
        dotNetRef?.Dispose();

        if (_hubConnection != null)
        {
            try
            {
                await _hubConnection.StopAsync();
                await _hubConnection.DisposeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing SignalR connection: {ex.Message}");
            }
            _hubConnection = null;
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(ChatMessage)) return;

        if (!IsPrivate)
        {
            await _hubConnection.InvokeAsync("SendChatMessage", RoomId, UserId, UserName, ChatMessage);
        }
        else if (!string.IsNullOrWhiteSpace(SelectedPrivateUserId))
        {
            await _hubConnection.InvokeAsync("SendPrivateMessage", RoomId, UserId, SelectedPrivateUserId, ChatMessage);
        }

        ChatMessage = "";
    }

    private async Task SendOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
}

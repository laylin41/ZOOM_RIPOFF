@page "/create-meeting"
@inject NavigationManager Navigation
@inject IMeetingService MeetingService
@inject SignInManager<AppUser> SignInManager
@attribute [Authorize]

@rendermode InteractiveServer

<PageTitle>Створити конференцію</PageTitle>

<div class="container-mt-4">
    <h2 class="text-3xl font-semibold text-center text-gray-800">Створити нову конференцію</h2>

    <div>
        <!-- ID конференції -->
        <div class="m-1">
            <label class="font-medium text-gray-700">ID конференції:</label>
            <div class="relative">
                <input class="border border-gray-300 px-4 py-2 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:outline-none"
                        value="@MeetingId" @oninput="CheckIdAvailability" />
                @if (IdAlreadyTaken)
                {
                    <span class="absolute text-red-600 text-sm mt-1">Цей ID вже зайнятий</span>
                }
            </div>
        </div>

        <!-- Назва конференції -->
        <div class="m-1">
            <label class="font-medium text-gray-700">Назва конференції:</label>
            <div class="relative">
                <input class="border border-gray-300 px-4 py-2 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:outline-none"
                        @bind="MeetingName" />
            </div>
        </div>

        <!-- Запланована конференція? -->
        <div class="flex items-center m-1">
            <label class="font-medium text-gray-700">Запланована конференція?</label>
            <input type="checkbox" class="ml-3 rounded" @bind="IsScheduled" />
        </div>

        @if (IsScheduled)
        {
            <div class="m-1">
                <label class="font-medium text-gray-700">Оберіть дату та час:</label>
                <input type="datetime-local"
                        class="border border-gray-300 px-4 py-2 rounded-lg w-full focus:ring-2 focus:ring-blue-500 focus:outline-none"
                        @onchange="OnDateChanged"
                        min="@MinDateTime" />
            </div>
        }
    </div>

    <!-- Кнопка для генерації нового ID -->
    <div class="mt-2">
        <button class="btn btn-primary" @onclick="GenerateMeetingId"> Згенерувати новий ID </button>
        <!-- Кнопка для створення конференції -->
        <button class="btn btn-success" @onclick="CreateTheMeeting" disabled="@(IdAlreadyTaken || !CanCreate)"> Створити конференцію </button>
    </div>
    
</div>

@code {
    private string MeetingId = string.Empty;
    private string MeetingName = string.Empty;
    private bool CanCreate => !string.IsNullOrWhiteSpace(MeetingId);
    private bool IdAlreadyTaken = false;
    private bool IsScheduled = false;
    private DateTime? ScheduledDate { get; set; }
    private string MinDateTime => DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
    private bool IsDateInvalid { get; set; } = false;

    private async Task GenerateMeetingId()
    {
        MeetingId = await MeetingService.GenerateUniqueMeetingIdAsync();
    }

    private async Task CheckIdAvailability(ChangeEventArgs e)
    {
        var inputValue = e.Value?.ToString()?.Trim();
        MeetingId = inputValue ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(MeetingId))
        {
            IdAlreadyTaken = await MeetingService.CheckMeetingIdExists(MeetingId);
        }
        else
        {
            IdAlreadyTaken = false;
        }
    }

    private void OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var selected))
        {
            ScheduledDate = selected;
            IsDateInvalid = selected < DateTime.Now;
        }
        else
        {
            IsDateInvalid = false;
        }
    }


    private async Task CreateTheMeeting()
    {
        if (IdAlreadyTaken)
                {
            Console.WriteLine("ID is already taken, cannot create meeting.");
            return;
        }
        var user = await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User);
        if (user == null)
            return;

        if (MeetingName == string.Empty)
        {
            MeetingName = user.DisplayName + " meeting";
        }
        var meeting = new Meeting()
        {
            MeetingId = MeetingId,
            MeetingName = MeetingName,
            IsActive = IsScheduled ? false : true,
            OwnerId = user.Id,
            ScheduledToStartAt = IsScheduled ? ScheduledDate : null,
            CreatedAt = DateTime.UtcNow
        };
        await MeetingService.CreateMeetingAsync(meeting);
        Navigation.NavigateTo($"/meeting/{meeting.MeetingId}");
    }
}